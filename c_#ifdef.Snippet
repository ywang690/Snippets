<CodeSnippet Format="1.0.0">
  <Header>
    <Title>c #ifdef</Title>
    <Shortcut>c #ifdef</Shortcut>
    <Description>My custom C++ function template</Description>
    <Author>James Wang</Author>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>type</ID>
        <Default>int</Default>
      </Literal>
      <Literal>
        <ID>name</ID>
        <Default>MyFunction</Default>
      </Literal>
    </Declarations>
    <Code Language="CPP">
      <![CDATA[
        #include <stdio.h>
        int main(void)
        {
            printf("%s %p %p\n",m1, &m1,m1);
            printf("");
            // data Types and formatted I/O
            //hello world!
            //floating-point round-off errors
            //syntax of printf()
            //syntax of scanf()
            //print integer numbers
            //print floating-points
            //printf() modifiers for integer
            //printf() modifiers for floating-point
            //read integer numbers
            //operators, expressions and statements
            //operators and operands
            //operator precedence
            //assignment operator :=
            //sizeof operator
            //modulus operator:%
            //use % to convert seconds
            //prefix/postfix increment 1
            //prefix/postfox increment 2
            //prefix/postfox increment 3  
            //while loop1
            //while loop2
            //while loop3
            //summing integers using a whole loop1
            //summing integers using a whole loop2
            //bool type
            //using bool
            //using do-while loop
            //for loop
            //nested loop1
            //nested loop2
            // if statement
            // using if
            // if else statement
            //using if-else
            //using multiple if statements
            //using multiple if-else statement
            //using else-if
            //Operator ?:
            // continue
            //break
            //break and continue in for loops
            //break and continue in for loops2
            // using the switch statement
            //omitting function prototype
            //different ways for defining function
            //(formal)parameters and (actual)arguments
            //using & and *
            //swapping variables(1)
            //swapping variables(2)
            //Array and pointers
            //using arrays
            //examining array bounds
            //multidimensional arrays
            //finding averages of rows
            //arrays, pointers and addresses
            //printing addresses of arrays
            //printing arrays
            //functions, arrays, and pointers
            //summing an array
            //finding average of rows
            //variable length array(VLA) 
            //pointer operators
            //using string literals as pointers
            //character strings: arrays vs pointers
            //command line arguments
            //pointers and strings
            //strlen() and sizeof
            //strcpy() and strncpy()
            //strcmp90 and strncmp()
            //strchr() and strrchr()
            //sscanf() and snprintf()
            //scope
            //storage duration
            //linkage(跨檔案)
            //automatic
            //static variables with block scope
            //using external variables
            //static variable with internal linkage
            //static variables with internal linkage
            //malloc,free
            //const to protect arrays
            //file I/O           
            //standard I/O
            //counting and displaying files
            //fgets() and fputs()
            //echo input
            //fprintf()
            //fwrite()
            //fread()/fwrite()/fseek()
            //structures
            //initializing structure
            // array of structures
            //nested structures
            //structure pointers
            //passing structures by value
            //assigning structures
            //passing structures by addresses
            //using malloc to allocate memory for structures
            //passing an array of structures
            //typedef
            //union
            //enum
            //bit manipulation
            //bitwise and : &
            //bitwise or:|
            //or: ^
            //left shift:<<
            //right shift :>>
            //right shift
            //turning bits on/off
            //toggling bits
            //print and integer in binary form
            //bit fields
            //#define1,2,3,4
            //#ifdef
            //#ifndef
            //asset()
            //memcpy()
            return 0;
        }
      ]]>
    </Code>
  </Snippet>
</CodeSnippet>